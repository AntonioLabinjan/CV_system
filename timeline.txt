Detailed Development Timeline
Phase 1: Initial Setup and Database Design (Weeks 1-2)
Week 1:
Day 1-2: Project kickoff, define project scope, and gather requirements. # DONE
Day 3-5: Set up the development environment, including version control (Git) and project management tools. # DONE
Day 6-7: Design the SQLite database schema, defining tables for employees, attendance, and payments. # DONE

Week 2:
Day 8-9: Implement the SQLite database schema. # DONE
Day 10-12: Create sample data for testing. # DONE
Day 13-14: Test the database setup and make necessary adjustments. # DONE

Phase 2: Facial Recognition System (Weeks 3-5)
Week 3:
Day 15-17: Research and select appropriate facial recognition models (e.g., OpenAI's CLIP model). # DONE
Day 18-21: Prepare the dataset with employee pictures, creating a folder structure with subfolders for each employee. # DONE

Week 4:
Day 22-24: Train the facial recognition model using the prepared dataset. # DONE
Day 25-28: Develop the face recognition algorithm to identify employees. # DONE

Week 5:
Day 29: Implement a attendance list template (list all attendances for each employee along with date&time for each attendance) + somehow check if person is going in or out (prvo da se samo odabere, pole Ä‡e bit 2 kamere) # DONE
Day 29-31: Integrate the face recognition system with the smart lock (Arduino or similar).
Day 32-35: Implement and test the logic to open/close doors based on recognition results.
Day 36-37: Print simulation statements ("Person recognized, door opened" / "Person unknown, door closed").

Phase 3: Payment Calculation and Business Logic (Weeks 6-7)
Week 6:
Day 38-40: Develop functions to calculate work hours from entry and exit times. # DONE
Day 41-44: Implement payment calculation functions, including logic for overtime, vacation, and sick days. # DONE

Week 7:
Day 45-47: Integrate payment calculation functions with the database. # DONE
Day 48-50: Create and test scripts to update payment records in the database. # DONE
Day 51-52: Conduct initial testing and debugging of payment calculation and integration. # DONE

Phase 4: User Interface Development (Weeks 8-10)

Week 8:
Day 53-55: Design wireframes and mockups for the user interface. # DONE
Day 56-58: Set up the web framework (Flask/Django) and start building the frontend. # DONE

Week 9:
Day 59-61: Develop the employee management interface, including forms for inputting and updating employee information. # DONE
Day 62-64: Implement list view for employees with options to edit or delete records. # DONE
Day 65-66: Integrate frontend with the backend to display and manage employee data.  # DONE

Week 10:
Day 67-69: Develop attendance reporting interface to display daily attendance records. # DONE
Day 70-72: Create payroll report generation and export functionality. # DONE
Day 73-74: Conduct initial testing of the user interface and make necessary adjustments.

Phase 5: Testing and Deployment (Weeks 11-12)

Week 11:
Day 75-77: Perform comprehensive testing of the entire system, including facial recognition, payment calculation, and user interface.
Day 78-80: Identify and fix any bugs or issues discovered during testing.
Day 81-82: Conduct user acceptance testing (UAT) with a small group of employees.

Week 12:
Day 83-85: Finalize documentation, including user manuals and technical documentation.
Day 86-88: Prepare deployment environment and deploy the system.
Day 89-90: Provide training to users and administrators on how to use the system.

Post-Deployment (Ongoing)

Maintenance and Support:
Provide ongoing support for the system, addressing any issues that arise.
Regularly update the system to incorporate new features and improvements based on user feedback.
Ensure the system remains secure and up-to-date with the latest technologies.

Summary
This detailed timeline provides a structured approach to developing the smart employee attendance and payment system, ensuring that each phase is thoroughly planned and executed. Regular testing and feedback loops are included to ensure the system meets the desired requirements and operates smoothly.
